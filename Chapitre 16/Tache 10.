Voici l‚Äôexercice **HC16T10 : Fr√©quence des caract√®res d‚Äôune cha√Æne** enti√®rement expliqu√© üëá

---

###  Objectif

Cr√©er une fonction qui prend une **cha√Æne de caract√®res** et retourne un **dictionnaire** (liste de paires) indiquant la **fr√©quence de chaque caract√®re**.

Exemple :

* `"hello"` ‚Üí `[('h',1),('e',1),('l',2),('o',1)]`

---

###  Code 

```haskell
-- HC16T10 : Fr√©quence des caract√®res d'une cha√Æne

import Data.List (nub)

-- Fonction qui calcule la fr√©quence des caract√®res
frequence :: String -> [(Char, Int)]
frequence s = [(c, compter c s) | c <- nub s]

-- Fonction qui compte le nombre d'occurrences d'un caract√®re
compter :: Char -> String -> Int
compter _ [] = 0
compter c (x:xs)
    | c == x    = 1 + compter c xs
    | otherwise = compter c xs

-- Programme principal pour tester
main :: IO ()
main = do
    putStrLn "=== Fr√©quence des caract√®res ==="
    putStrLn "Entrez une cha√Æne de caract√®res :"
    input <- getLine
    let freq = frequence input
    putStrLn "Fr√©quence des caract√®res :"
    mapM_ (\(c,n) -> putStrLn (show c ++ " : " ++ show n)) freq
```

---

### üîç Explications pas √† pas

1. **`nub`**

```haskell
nub s
```

* Supprime les doublons dans la cha√Æne pour ne compter chaque caract√®re qu‚Äôune fois.

2. **`compter`**

* Parcourt la cha√Æne et compte combien de fois `c` appara√Æt.
* Cas r√©cursif : si le caract√®re correspond, on ajoute 1 ; sinon on continue.

3. **`frequence`**

```haskell
frequence s = [(c, compter c s) | c <- nub s]
```

* Cr√©e une liste de paires `(caract√®re, nombre d‚Äôoccurrences)` pour chaque caract√®re unique.

4. **Bloc `main`**

* Lit une cha√Æne de caract√®res de l‚Äôutilisateur.
* Calcule la fr√©quence avec `frequence`.
* Affiche chaque caract√®re et sa fr√©quence.

---

### üß© Exemple d‚Äôex√©cution

```
=== Fr√©quence des caract√®res ===
Entrez une cha√Æne de caract√®res :
hello
Fr√©quence des caract√®res :
h : 1
e : 1
l : 2
o : 1
```

